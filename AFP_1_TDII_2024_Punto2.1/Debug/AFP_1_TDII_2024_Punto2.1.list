
AFP_1_TDII_2024_Punto2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800312c  0800312c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003134  08003134  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003134  08003134  00004134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003138  08003138  00004138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800313c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000077c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df4e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3a  00000000  00000000  00012f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00014bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000897  00000000  00000000  000156e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cc9  00000000  00000000  00015f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc7c  00000000  00000000  00039c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9db2  00000000  00000000  000468c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120676  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f0c  00000000  00000000  001206bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001235c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080030f0 	.word	0x080030f0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080030f0 	.word	0x080030f0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbeb 	bl	8000cbc <HAL_Init>

  /* USER CODE BEGIN Init */
  int LEDS[3] = {LD1_Pin, LD2_Pin, LD3_Pin};
 80004e6:	4a13      	ldr	r2, [pc, #76]	@ (8000534 <main+0x58>)
 80004e8:	463b      	mov	r3, r7
 80004ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f824 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f932 	bl	800075c <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f88a 	bl	8000610 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f8d6 	bl	80006ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f8fe 	bl	8000700 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0;i<3;i++)
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e010      	b.n	800052c <main+0x50>
	  {
		HAL_GPIO_TogglePin(GPIOB, LEDS[i]);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3310      	adds	r3, #16
 8000510:	443b      	add	r3, r7
 8000512:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	4807      	ldr	r0, [pc, #28]	@ (8000538 <main+0x5c>)
 800051c:	f001 fa37 	bl	800198e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000520:	20c8      	movs	r0, #200	@ 0xc8
 8000522:	f000 fc3d 	bl	8000da0 <HAL_Delay>
	  for(int i=0;i<3;i++)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b02      	cmp	r3, #2
 8000530:	ddeb      	ble.n	800050a <main+0x2e>
 8000532:	e7e7      	b.n	8000504 <main+0x28>
 8000534:	08003108 	.word	0x08003108
 8000538:	40020400 	.word	0x40020400

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fda3 	bl	8003096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	@ 0xa8
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fb0d 	bl	8001be0 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f974 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fd6e 	bl	80020d0 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f95d 	bl	80008b8 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <MX_ETH_Init+0x84>)
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <MX_ETH_Init+0x88>)
 8000618:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <MX_ETH_Init+0x8c>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_ETH_Init+0x8c>)
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_ETH_Init+0x8c>)
 8000628:	22e1      	movs	r2, #225	@ 0xe1
 800062a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_ETH_Init+0x8c>)
 800062e:	2200      	movs	r2, #0
 8000630:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_ETH_Init+0x8c>)
 8000634:	2200      	movs	r2, #0
 8000636:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_ETH_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_ETH_Init+0x84>)
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <MX_ETH_Init+0x8c>)
 8000642:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_ETH_Init+0x84>)
 8000646:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800064a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_ETH_Init+0x84>)
 800064e:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <MX_ETH_Init+0x90>)
 8000650:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_ETH_Init+0x84>)
 8000654:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <MX_ETH_Init+0x94>)
 8000656:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_ETH_Init+0x84>)
 800065a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800065e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <MX_ETH_Init+0x84>)
 8000662:	f000 fca7 	bl	8000fb4 <HAL_ETH_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 f924 	bl	80008b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000670:	2238      	movs	r2, #56	@ 0x38
 8000672:	2100      	movs	r1, #0
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <MX_ETH_Init+0x98>)
 8000676:	f002 fd0e 	bl	8003096 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_ETH_Init+0x98>)
 800067c:	2221      	movs	r2, #33	@ 0x21
 800067e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_ETH_Init+0x98>)
 8000682:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000686:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_ETH_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200001a0 	.word	0x200001a0
 8000698:	40028000 	.word	0x40028000
 800069c:	2000077c 	.word	0x2000077c
 80006a0:	20000100 	.word	0x20000100
 80006a4:	20000060 	.word	0x20000060
 80006a8:	20000028 	.word	0x20000028

080006ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <MX_USART3_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f001 ff14 	bl	8002510 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f8e3 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000250 	.word	0x20000250
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800070a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	2204      	movs	r2, #4
 8000710:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000714:	2202      	movs	r2, #2
 8000716:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000720:	2202      	movs	r2, #2
 8000722:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000726:	2201      	movs	r2, #1
 8000728:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2201      	movs	r2, #1
 800073a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	f001 f93d 	bl	80019c2 <HAL_PCD_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8b3 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000298 	.word	0x20000298

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a4b      	ldr	r2, [pc, #300]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b49      	ldr	r3, [pc, #292]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b45      	ldr	r3, [pc, #276]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a44      	ldr	r2, [pc, #272]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b42      	ldr	r3, [pc, #264]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b3e      	ldr	r3, [pc, #248]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a3d      	ldr	r2, [pc, #244]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b3b      	ldr	r3, [pc, #236]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a36      	ldr	r2, [pc, #216]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a2f      	ldr	r2, [pc, #188]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000820:	4822      	ldr	r0, [pc, #136]	@ (80008ac <MX_GPIO_Init+0x150>)
 8000822:	f001 f89b 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4821      	ldr	r0, [pc, #132]	@ (80008b0 <MX_GPIO_Init+0x154>)
 800082c:	f001 f896 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	@ (80008b4 <MX_GPIO_Init+0x158>)
 8000848:	f000 fedc 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <MX_GPIO_Init+0x150>)
 8000866:	f000 fecd 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086a:	2340      	movs	r3, #64	@ 0x40
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_GPIO_Init+0x154>)
 8000882:	f000 febf 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000886:	2380      	movs	r3, #128	@ 0x80
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_GPIO_Init+0x154>)
 800089a:	f000 feb3 	bl	8001604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	@ 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40020800 	.word	0x40020800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	@ 0x38
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a55      	ldr	r2, [pc, #340]	@ (8000a88 <HAL_ETH_MspInit+0x174>)
 8000932:	4293      	cmp	r3, r2
 8000934:	f040 80a4 	bne.w	8000a80 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	4b53      	ldr	r3, [pc, #332]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a52      	ldr	r2, [pc, #328]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b50      	ldr	r3, [pc, #320]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000950:	623b      	str	r3, [r7, #32]
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	4b4c      	ldr	r3, [pc, #304]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800095e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000962:	6313      	str	r3, [r2, #48]	@ 0x30
 8000964:	4b49      	ldr	r3, [pc, #292]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	4b45      	ldr	r3, [pc, #276]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a44      	ldr	r2, [pc, #272]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800097a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000980:	4b42      	ldr	r3, [pc, #264]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	4a3d      	ldr	r2, [pc, #244]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6313      	str	r3, [r2, #48]	@ 0x30
 800099c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b0:	4a36      	ldr	r2, [pc, #216]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b8:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <HAL_ETH_MspInit+0x178>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009fc:	2332      	movs	r3, #50	@ 0x32
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	481e      	ldr	r0, [pc, #120]	@ (8000a90 <HAL_ETH_MspInit+0x17c>)
 8000a18:	f000 fdf4 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a1c:	2386      	movs	r3, #134	@ 0x86
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2c:	230b      	movs	r3, #11
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4817      	ldr	r0, [pc, #92]	@ (8000a94 <HAL_ETH_MspInit+0x180>)
 8000a38:	f000 fde4 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4e:	230b      	movs	r3, #11
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <HAL_ETH_MspInit+0x184>)
 8000a5a:	f000 fdd3 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a5e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <HAL_ETH_MspInit+0x188>)
 8000a7c:	f000 fdc2 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40028000 	.word	0x40028000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40021800 	.word	0x40021800

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <HAL_UART_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12c      	bne.n	8000b1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000afa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_UART_MspInit+0x8c>)
 8000b18:	f000 fd74 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40004800 	.word	0x40004800
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b50:	d13f      	bne.n	8000bd2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b6e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b80:	230a      	movs	r3, #10
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <HAL_PCD_MspInit+0xb0>)
 8000b8c:	f000 fd3a 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <HAL_PCD_MspInit+0xb0>)
 8000ba6:	f000 fd2d 	bl	8001604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_PCD_MspInit+0xac>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	@ 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f891 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 fa07 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc1f 	bl	80004dc <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cac:	0800313c 	.word	0x0800313c
  ldr r2, =_sbss
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb4:	20000788 	.word	0x20000788

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f931 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fde8 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f93b 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f911 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000784 	.word	0x20000784

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000784 	.word	0x20000784

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff5c 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffb0 	bl	8000f08 <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e06c      	b.n	80010a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2223      	movs	r2, #35	@ 0x23
 8000fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fc9b 	bl	8000914 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	@ (80010a8 <HAL_ETH_Init+0xf4>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a30      	ldr	r2, [pc, #192]	@ (80010a8 <HAL_ETH_Init+0xf4>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <HAL_ETH_Init+0xf4>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <HAL_ETH_Init+0xf8>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80010ac <HAL_ETH_Init+0xf8>)
 8001000:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001004:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <HAL_ETH_Init+0xf8>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	4927      	ldr	r1, [pc, #156]	@ (80010ac <HAL_ETH_Init+0xf8>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001014:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <HAL_ETH_Init+0xf8>)
 8001016:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800102e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff feaa 	bl	8000d88 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001036:	e011      	b.n	800105c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001038:	f7ff fea6 	bl	8000d88 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001046:	d909      	bls.n	800105c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	22e0      	movs	r2, #224	@ 0xe0
 8001054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e021      	b.n	80010a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e4      	bne.n	8001038 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f958 	bl	8001324 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f9ff 	bl	8001478 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fa55 	bl	800152a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	461a      	mov	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9bd 	bl	8001408 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2210      	movs	r2, #16
 800109a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800

080010b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4b51      	ldr	r3, [pc, #324]	@ (800120c <ETH_SetMACConfig+0x15c>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	7c1b      	ldrb	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <ETH_SetMACConfig+0x28>
 80010d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010d6:	e000      	b.n	80010da <ETH_SetMACConfig+0x2a>
 80010d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	7c5b      	ldrb	r3, [r3, #17]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <ETH_SetMACConfig+0x38>
 80010e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e6:	e000      	b.n	80010ea <ETH_SetMACConfig+0x3a>
 80010e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	7fdb      	ldrb	r3, [r3, #31]
 80010f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80010f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80010fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	7f92      	ldrb	r2, [r2, #30]
 8001104:	2a00      	cmp	r2, #0
 8001106:	d102      	bne.n	800110e <ETH_SetMACConfig+0x5e>
 8001108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110c:	e000      	b.n	8001110 <ETH_SetMACConfig+0x60>
 800110e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001110:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	7f1b      	ldrb	r3, [r3, #28]
 8001116:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001118:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800111e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800112e:	2a00      	cmp	r2, #0
 8001130:	d102      	bne.n	8001138 <ETH_SetMACConfig+0x88>
 8001132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001136:	e000      	b.n	800113a <ETH_SetMACConfig+0x8a>
 8001138:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800113a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	7bdb      	ldrb	r3, [r3, #15]
 8001140:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001142:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001148:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001150:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001152:	4313      	orrs	r3, r2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fe18 	bl	8000da0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001186:	4013      	ands	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001196:	2a00      	cmp	r2, #0
 8001198:	d101      	bne.n	800119e <ETH_SetMACConfig+0xee>
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	e000      	b.n	80011a0 <ETH_SetMACConfig+0xf0>
 800119e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80011ae:	2a01      	cmp	r2, #1
 80011b0:	d101      	bne.n	80011b6 <ETH_SetMACConfig+0x106>
 80011b2:	2208      	movs	r2, #8
 80011b4:	e000      	b.n	80011b8 <ETH_SetMACConfig+0x108>
 80011b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80011b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80011c0:	2a01      	cmp	r2, #1
 80011c2:	d101      	bne.n	80011c8 <ETH_SetMACConfig+0x118>
 80011c4:	2204      	movs	r2, #4
 80011c6:	e000      	b.n	80011ca <ETH_SetMACConfig+0x11a>
 80011c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80011d2:	2a01      	cmp	r2, #1
 80011d4:	d101      	bne.n	80011da <ETH_SetMACConfig+0x12a>
 80011d6:	2202      	movs	r2, #2
 80011d8:	e000      	b.n	80011dc <ETH_SetMACConfig+0x12c>
 80011da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011dc:	4313      	orrs	r3, r2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff fdd3 	bl	8000da0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	ff20810f 	.word	0xff20810f

08001210 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <ETH_SetDMAConfig+0x110>)
 800122a:	4013      	ands	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	7b1b      	ldrb	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <ETH_SetDMAConfig+0x2c>
 8001236:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800123a:	e000      	b.n	800123e <ETH_SetDMAConfig+0x2e>
 800123c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7b5b      	ldrb	r3, [r3, #13]
 8001242:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001244:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	7f52      	ldrb	r2, [r2, #29]
 800124a:	2a00      	cmp	r2, #0
 800124c:	d102      	bne.n	8001254 <ETH_SetDMAConfig+0x44>
 800124e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001252:	e000      	b.n	8001256 <ETH_SetDMAConfig+0x46>
 8001254:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001256:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7b9b      	ldrb	r3, [r3, #14]
 800125c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800125e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001264:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	7f1b      	ldrb	r3, [r3, #28]
 800126a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800126c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	7f9b      	ldrb	r3, [r3, #30]
 8001272:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001274:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800127a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001282:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001284:	4313      	orrs	r3, r2
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001294:	461a      	mov	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fd7a 	bl	8000da0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80012ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80012da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fd4b 	bl	8000da0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	f8de3f23 	.word	0xf8de3f23

08001324 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0a6      	sub	sp, #152	@ 0x98
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800134e:	2301      	movs	r3, #1
 8001350:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001360:	2300      	movs	r3, #0
 8001362:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800136a:	2300      	movs	r3, #0
 800136c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001386:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800138a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800138c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001398:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe86 	bl	80010b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80013d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80013da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80013e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff08 	bl	8001210 <ETH_SetDMAConfig>
}
 8001400:	bf00      	nop
 8001402:	3798      	adds	r7, #152	@ 0x98
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3305      	adds	r3, #5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	3204      	adds	r2, #4
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <ETH_MACAddressConfig+0x68>)
 800142a:	4413      	add	r3, r2
 800142c:	461a      	mov	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3303      	adds	r3, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3302      	adds	r3, #2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <ETH_MACAddressConfig+0x6c>)
 800145a:	4413      	add	r3, r2
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40028040 	.word	0x40028040
 8001474:	40028044 	.word	0x40028044

08001478 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e03e      	b.n	8001504 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68d9      	ldr	r1, [r3, #12]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	3206      	adds	r2, #6
 80014b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d80c      	bhi.n	80014e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	461a      	mov	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	e004      	b.n	80014f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9bd      	bls.n	8001486 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151c:	611a      	str	r2, [r3, #16]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e046      	b.n	80015c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6919      	ldr	r1, [r3, #16]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001574:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 800157c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	3212      	adds	r2, #18
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d80c      	bhi.n	80015b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	461a      	mov	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	e004      	b.n	80015c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d9b5      	bls.n	8001538 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e177      	b.n	8001910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 8166 	bne.w	800190a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d005      	beq.n	8001656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	2b02      	cmp	r3, #2
 8001654:	d130      	bne.n	80016b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 0201 	and.w	r2, r3, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d017      	beq.n	80016f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d123      	bne.n	8001748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80c0 	beq.w	800190a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <HAL_GPIO_Init+0x324>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a65      	ldr	r2, [pc, #404]	@ (8001928 <HAL_GPIO_Init+0x324>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b63      	ldr	r3, [pc, #396]	@ (8001928 <HAL_GPIO_Init+0x324>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a6:	4a61      	ldr	r2, [pc, #388]	@ (800192c <HAL_GPIO_Init+0x328>)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <HAL_GPIO_Init+0x32c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d037      	beq.n	8001842 <HAL_GPIO_Init+0x23e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a57      	ldr	r2, [pc, #348]	@ (8001934 <HAL_GPIO_Init+0x330>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_GPIO_Init+0x23a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a56      	ldr	r2, [pc, #344]	@ (8001938 <HAL_GPIO_Init+0x334>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d02b      	beq.n	800183a <HAL_GPIO_Init+0x236>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a55      	ldr	r2, [pc, #340]	@ (800193c <HAL_GPIO_Init+0x338>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d025      	beq.n	8001836 <HAL_GPIO_Init+0x232>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a54      	ldr	r2, [pc, #336]	@ (8001940 <HAL_GPIO_Init+0x33c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01f      	beq.n	8001832 <HAL_GPIO_Init+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a53      	ldr	r2, [pc, #332]	@ (8001944 <HAL_GPIO_Init+0x340>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x22a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_GPIO_Init+0x344>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x226>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a51      	ldr	r2, [pc, #324]	@ (800194c <HAL_GPIO_Init+0x348>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x222>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a50      	ldr	r2, [pc, #320]	@ (8001950 <HAL_GPIO_Init+0x34c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x21e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	@ (8001954 <HAL_GPIO_Init+0x350>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x21a>
 800181a:	2309      	movs	r3, #9
 800181c:	e012      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800181e:	230a      	movs	r3, #10
 8001820:	e010      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001822:	2308      	movs	r3, #8
 8001824:	e00e      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001826:	2307      	movs	r3, #7
 8001828:	e00c      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800182a:	2306      	movs	r3, #6
 800182c:	e00a      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800182e:	2305      	movs	r3, #5
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001832:	2304      	movs	r3, #4
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001842:	2300      	movs	r3, #0
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f002 0203 	and.w	r2, r2, #3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	@ (800192c <HAL_GPIO_Init+0x328>)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001862:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_GPIO_Init+0x354>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001886:	4a34      	ldr	r2, [pc, #208]	@ (8001958 <HAL_GPIO_Init+0x354>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188c:	4b32      	ldr	r3, [pc, #200]	@ (8001958 <HAL_GPIO_Init+0x354>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b0:	4a29      	ldr	r2, [pc, #164]	@ (8001958 <HAL_GPIO_Init+0x354>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <HAL_GPIO_Init+0x354>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018da:	4a1f      	ldr	r2, [pc, #124]	@ (8001958 <HAL_GPIO_Init+0x354>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_GPIO_Init+0x354>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001904:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <HAL_GPIO_Init+0x354>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	f67f ae84 	bls.w	8001620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40013800 	.word	0x40013800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40021400 	.word	0x40021400
 8001948:	40021800 	.word	0x40021800
 800194c:	40021c00 	.word	0x40021c00
 8001950:	40022000 	.word	0x40022000
 8001954:	40022400 	.word	0x40022400
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	041a      	lsls	r2, r3, #16
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	400b      	ands	r3, r1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	619a      	str	r2, [r3, #24]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af02      	add	r7, sp, #8
 80019c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e101      	b.n	8001bd8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff f89e 	bl	8000b30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a02:	d102      	bne.n	8001a0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f8a6 	bl	8002b60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7c1a      	ldrb	r2, [r3, #16]
 8001a1c:	f88d 2000 	strb.w	r2, [sp]
 8001a20:	3304      	adds	r3, #4
 8001a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a24:	f001 f838 	bl	8002a98 <USB_CoreInit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0ce      	b.n	8001bd8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f89e 	bl	8002b82 <USB_SetCurrentMode>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0bf      	b.n	8001bd8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e04a      	b.n	8001af4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3315      	adds	r3, #21
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3314      	adds	r3, #20
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	b298      	uxth	r0, r3
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332e      	adds	r3, #46	@ 0x2e
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3318      	adds	r3, #24
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	331c      	adds	r3, #28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3320      	adds	r3, #32
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3324      	adds	r3, #36	@ 0x24
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	3301      	adds	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3af      	bcc.n	8001a5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e044      	b.n	8001b8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3b5      	bcc.n	8001b04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7c1a      	ldrb	r2, [r3, #16]
 8001ba0:	f88d 2000 	strb.w	r2, [sp]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	f001 f838 	bl	8002c1c <USB_DevInit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00c      	b.n	8001bd8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fa00 	bl	8002fd6 <USB_DevDisconnect>

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e267      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d075      	beq.n	8001cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b85      	ldr	r3, [pc, #532]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b82      	ldr	r3, [pc, #520]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b7e      	ldr	r3, [pc, #504]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e242      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x74>
 8001c46:	4b76      	ldr	r3, [pc, #472]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b70      	ldr	r3, [pc, #448]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6f      	ldr	r2, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c78:	4b69      	ldr	r3, [pc, #420]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a68      	ldr	r2, [pc, #416]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f876 	bl	8000d88 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f872 	bl	8000d88 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e207      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f862 	bl	8000d88 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f85e 	bl	8000d88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1f3      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xe8>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1c7      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4937      	ldr	r1, [pc, #220]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HAL_RCC_OscConfig+0x244>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f817 	bl	8000d88 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f813 	bl	8000d88 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1a8      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4925      	ldr	r1, [pc, #148]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x244>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe fff6 	bl	8000d88 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7fe fff2 	bl	8000d88 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e187      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d036      	beq.n	8001e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x248>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7fe ffd6 	bl	8000d88 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7fe ffd2 	bl	8000d88 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e167      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_OscConfig+0x240>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_OscConfig+0x248>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe ffbf 	bl	8000d88 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00e      	b.n	8001e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7fe ffbb 	bl	8000d88 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d907      	bls.n	8001e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e150      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	42470000 	.word	0x42470000
 8001e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ea      	bne.n	8001e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8097 	beq.w	8001f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b81      	ldr	r3, [pc, #516]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b7a      	ldr	r3, [pc, #488]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b77      	ldr	r3, [pc, #476]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a73      	ldr	r2, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ff7b 	bl	8000d88 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe ff77 	bl	8000d88 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e10c      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_RCC_OscConfig+0x474>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x2ea>
 8001ebc:	4b64      	ldr	r3, [pc, #400]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a63      	ldr	r2, [pc, #396]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x324>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x30c>
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ede:	4b5c      	ldr	r3, [pc, #368]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x324>
 8001eec:	4b58      	ldr	r3, [pc, #352]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4a57      	ldr	r2, [pc, #348]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef8:	4b55      	ldr	r3, [pc, #340]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a54      	ldr	r2, [pc, #336]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7fe ff3c 	bl	8000d88 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7fe ff38 	bl	8000d88 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0cb      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ee      	beq.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe ff26 	bl	8000d88 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7fe ff22 	bl	8000d88 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0b5      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	4b3e      	ldr	r3, [pc, #248]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	4a38      	ldr	r2, [pc, #224]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a1 	beq.w	80020c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d05c      	beq.n	8002044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d141      	bne.n	8002016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fef6 	bl	8000d88 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fef2 	bl	8000d88 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e087      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	491b      	ldr	r1, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fecb 	bl	8000d88 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe fec7 	bl	8000d88 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e05c      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x416>
 8002014:	e054      	b.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_RCC_OscConfig+0x478>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe feb4 	bl	8000d88 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe feb0 	bl	8000d88 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e045      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_RCC_OscConfig+0x470>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
 8002042:	e03d      	b.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e038      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000
 8002058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x4ec>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d028      	beq.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d121      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d11a      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002094:	4293      	cmp	r3, r2
 8002096:	d111      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0cc      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d90c      	bls.n	800210c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b65      	ldr	r3, [pc, #404]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a58      	ldr	r2, [pc, #352]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800212e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a52      	ldr	r2, [pc, #328]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d044      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218a:	2b03      	cmp	r3, #3
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b3f      	ldr	r3, [pc, #252]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e067      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b37      	ldr	r3, [pc, #220]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4934      	ldr	r1, [pc, #208]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7fe fde2 	bl	8000d88 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe fdde 	bl	8000d88 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e04f      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d20c      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490a      	ldr	r1, [pc, #40]	@ (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd42 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00
 800228c:	40023800 	.word	0x40023800
 8002290:	08003114 	.word	0x08003114
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a0:	b094      	sub	sp, #80	@ 0x50
 80022a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a8:	2300      	movs	r3, #0
 80022aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ac:	2300      	movs	r3, #0
 80022ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b4:	4b79      	ldr	r3, [pc, #484]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d00d      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	f200 80e1 	bhi.w	8002488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ce:	e0db      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b73      	ldr	r3, [pc, #460]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80022d4:	e0db      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d6:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80022d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022da:	e0d8      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022dc:	4b6f      	ldr	r3, [pc, #444]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e6:	4b6d      	ldr	r3, [pc, #436]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b6a      	ldr	r3, [pc, #424]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	2200      	movs	r2, #0
 80022fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
 800230a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	0159      	lsls	r1, r3, #5
 800231c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002320:	0150      	lsls	r0, r2, #5
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4621      	mov	r1, r4
 8002328:	1a51      	subs	r1, r2, r1
 800232a:	6139      	str	r1, [r7, #16]
 800232c:	4629      	mov	r1, r5
 800232e:	eb63 0301 	sbc.w	r3, r3, r1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002340:	4659      	mov	r1, fp
 8002342:	018b      	lsls	r3, r1, #6
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800234a:	4651      	mov	r1, sl
 800234c:	018a      	lsls	r2, r1, #6
 800234e:	4651      	mov	r1, sl
 8002350:	ebb2 0801 	subs.w	r8, r2, r1
 8002354:	4659      	mov	r1, fp
 8002356:	eb63 0901 	sbc.w	r9, r3, r1
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236e:	4690      	mov	r8, r2
 8002370:	4699      	mov	r9, r3
 8002372:	4623      	mov	r3, r4
 8002374:	eb18 0303 	adds.w	r3, r8, r3
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	462b      	mov	r3, r5
 800237c:	eb49 0303 	adc.w	r3, r9, r3
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800238e:	4629      	mov	r1, r5
 8002390:	024b      	lsls	r3, r1, #9
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002398:	4621      	mov	r1, r4
 800239a:	024a      	lsls	r2, r1, #9
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a2:	2200      	movs	r2, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023ac:	f7fd ff1e 	bl	80001ec <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b8:	e058      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ba:	4b38      	ldr	r3, [pc, #224]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	2200      	movs	r2, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	4611      	mov	r1, r2
 80023c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d4:	4642      	mov	r2, r8
 80023d6:	464b      	mov	r3, r9
 80023d8:	f04f 0000 	mov.w	r0, #0
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	0159      	lsls	r1, r3, #5
 80023e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e6:	0150      	lsls	r0, r2, #5
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4641      	mov	r1, r8
 80023ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f2:	4649      	mov	r1, r9
 80023f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800240c:	ebb2 040a 	subs.w	r4, r2, sl
 8002410:	eb63 050b 	sbc.w	r5, r3, fp
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	00eb      	lsls	r3, r5, #3
 800241e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002422:	00e2      	lsls	r2, r4, #3
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	4643      	mov	r3, r8
 800242a:	18e3      	adds	r3, r4, r3
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	464b      	mov	r3, r9
 8002430:	eb45 0303 	adc.w	r3, r5, r3
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002442:	4629      	mov	r1, r5
 8002444:	028b      	lsls	r3, r1, #10
 8002446:	4621      	mov	r1, r4
 8002448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800244c:	4621      	mov	r1, r4
 800244e:	028a      	lsls	r2, r1, #10
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002456:	2200      	movs	r2, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	61fa      	str	r2, [r7, #28]
 800245c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002460:	f7fd fec4 	bl	80001ec <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_GetSysClockFreq+0x200>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800247c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800247e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002490:	4618      	mov	r0, r3
 8002492:	3750      	adds	r7, #80	@ 0x50
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08003124 	.word	0x08003124

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0b5b      	lsrs	r3, r3, #13
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08003124 	.word	0x08003124

08002510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e042      	b.n	80025a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fab2 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	@ 0x24
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f82b 	bl	80025b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b0c0      	sub	sp, #256	@ 0x100
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	ea40 0301 	orr.w	r3, r0, r1
 80025d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002608:	f021 010c 	bic.w	r1, r1, #12
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002616:	430b      	orrs	r3, r1
 8002618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	6999      	ldr	r1, [r3, #24]
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	ea40 0301 	orr.w	r3, r0, r1
 8002636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b8f      	ldr	r3, [pc, #572]	@ (800287c <UART_SetConfig+0x2cc>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d005      	beq.n	8002650 <UART_SetConfig+0xa0>
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b8d      	ldr	r3, [pc, #564]	@ (8002880 <UART_SetConfig+0x2d0>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d104      	bne.n	800265a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002650:	f7ff ff4a 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8002654:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002658:	e003      	b.n	8002662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800265a:	f7ff ff31 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 800265e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266c:	f040 810c 	bne.w	8002888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002674:	2200      	movs	r2, #0
 8002676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800267a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800267e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	1891      	adds	r1, r2, r2
 8002688:	65b9      	str	r1, [r7, #88]	@ 0x58
 800268a:	415b      	adcs	r3, r3
 800268c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800268e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002692:	4621      	mov	r1, r4
 8002694:	eb12 0801 	adds.w	r8, r2, r1
 8002698:	4629      	mov	r1, r5
 800269a:	eb43 0901 	adc.w	r9, r3, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b2:	4690      	mov	r8, r2
 80026b4:	4699      	mov	r9, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	eb18 0303 	adds.w	r3, r8, r3
 80026bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026c0:	462b      	mov	r3, r5
 80026c2:	eb49 0303 	adc.w	r3, r9, r3
 80026c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026de:	460b      	mov	r3, r1
 80026e0:	18db      	adds	r3, r3, r3
 80026e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e4:	4613      	mov	r3, r2
 80026e6:	eb42 0303 	adc.w	r3, r2, r3
 80026ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80026ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026f4:	f7fd fd7a 	bl	80001ec <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4b61      	ldr	r3, [pc, #388]	@ (8002884 <UART_SetConfig+0x2d4>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	011c      	lsls	r4, r3, #4
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002710:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002720:	415b      	adcs	r3, r3
 8002722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002728:	4641      	mov	r1, r8
 800272a:	eb12 0a01 	adds.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb43 0b01 	adc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002748:	4692      	mov	sl, r2
 800274a:	469b      	mov	fp, r3
 800274c:	4643      	mov	r3, r8
 800274e:	eb1a 0303 	adds.w	r3, sl, r3
 8002752:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002756:	464b      	mov	r3, r9
 8002758:	eb4b 0303 	adc.w	r3, fp, r3
 800275c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800276c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002774:	460b      	mov	r3, r1
 8002776:	18db      	adds	r3, r3, r3
 8002778:	643b      	str	r3, [r7, #64]	@ 0x40
 800277a:	4613      	mov	r3, r2
 800277c:	eb42 0303 	adc.w	r3, r2, r3
 8002780:	647b      	str	r3, [r7, #68]	@ 0x44
 8002782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800278a:	f7fd fd2f 	bl	80001ec <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4611      	mov	r1, r2
 8002794:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <UART_SetConfig+0x2d4>)
 8002796:	fba3 2301 	umull	r2, r3, r3, r1
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2264      	movs	r2, #100	@ 0x64
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <UART_SetConfig+0x2d4>)
 80027ac:	fba3 2302 	umull	r2, r3, r3, r2
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027b8:	441c      	add	r4, r3
 80027ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027d4:	415b      	adcs	r3, r3
 80027d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027dc:	4641      	mov	r1, r8
 80027de:	1851      	adds	r1, r2, r1
 80027e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80027e2:	4649      	mov	r1, r9
 80027e4:	414b      	adcs	r3, r1
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027f4:	4659      	mov	r1, fp
 80027f6:	00cb      	lsls	r3, r1, #3
 80027f8:	4651      	mov	r1, sl
 80027fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fe:	4651      	mov	r1, sl
 8002800:	00ca      	lsls	r2, r1, #3
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	4603      	mov	r3, r0
 8002808:	4642      	mov	r2, r8
 800280a:	189b      	adds	r3, r3, r2
 800280c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002810:	464b      	mov	r3, r9
 8002812:	460a      	mov	r2, r1
 8002814:	eb42 0303 	adc.w	r3, r2, r3
 8002818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002828:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800282c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002830:	460b      	mov	r3, r1
 8002832:	18db      	adds	r3, r3, r3
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002836:	4613      	mov	r3, r2
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002846:	f7fd fcd1 	bl	80001ec <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <UART_SetConfig+0x2d4>)
 8002850:	fba3 1302 	umull	r1, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2164      	movs	r1, #100	@ 0x64
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	3332      	adds	r3, #50	@ 0x32
 8002862:	4a08      	ldr	r2, [pc, #32]	@ (8002884 <UART_SetConfig+0x2d4>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 0207 	and.w	r2, r3, #7
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4422      	add	r2, r4
 8002876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002878:	e106      	b.n	8002a88 <UART_SetConfig+0x4d8>
 800287a:	bf00      	nop
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400
 8002884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002892:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800289a:	4642      	mov	r2, r8
 800289c:	464b      	mov	r3, r9
 800289e:	1891      	adds	r1, r2, r2
 80028a0:	6239      	str	r1, [r7, #32]
 80028a2:	415b      	adcs	r3, r3
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028aa:	4641      	mov	r1, r8
 80028ac:	1854      	adds	r4, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb43 0501 	adc.w	r5, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	00eb      	lsls	r3, r5, #3
 80028be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c2:	00e2      	lsls	r2, r4, #3
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	18e3      	adds	r3, r4, r3
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028d0:	464b      	mov	r3, r9
 80028d2:	eb45 0303 	adc.w	r3, r5, r3
 80028d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028f6:	4629      	mov	r1, r5
 80028f8:	008b      	lsls	r3, r1, #2
 80028fa:	4621      	mov	r1, r4
 80028fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002900:	4621      	mov	r1, r4
 8002902:	008a      	lsls	r2, r1, #2
 8002904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002908:	f7fd fc70 	bl	80001ec <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b60      	ldr	r3, [pc, #384]	@ (8002a94 <UART_SetConfig+0x4e4>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011c      	lsls	r4, r3, #4
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002924:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	61b9      	str	r1, [r7, #24]
 8002934:	415b      	adcs	r3, r3
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6139      	str	r1, [r7, #16]
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002970:	464b      	mov	r3, r9
 8002972:	460a      	mov	r2, r1
 8002974:	eb42 0303 	adc.w	r3, r2, r3
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002986:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002994:	4649      	mov	r1, r9
 8002996:	008b      	lsls	r3, r1, #2
 8002998:	4641      	mov	r1, r8
 800299a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299e:	4641      	mov	r1, r8
 80029a0:	008a      	lsls	r2, r1, #2
 80029a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029a6:	f7fd fc21 	bl	80001ec <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <UART_SetConfig+0x4e4>)
 80029b2:	fba3 2301 	umull	r2, r3, r3, r1
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2264      	movs	r2, #100	@ 0x64
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	1acb      	subs	r3, r1, r3
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	3332      	adds	r3, #50	@ 0x32
 80029c4:	4a33      	ldr	r2, [pc, #204]	@ (8002a94 <UART_SetConfig+0x4e4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029d0:	441c      	add	r4, r3
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80029da:	677a      	str	r2, [r7, #116]	@ 0x74
 80029dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	1891      	adds	r1, r2, r2
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	415b      	adcs	r3, r3
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f0:	4641      	mov	r1, r8
 80029f2:	1851      	adds	r1, r2, r1
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	4649      	mov	r1, r9
 80029f8:	414b      	adcs	r3, r1
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a08:	4659      	mov	r1, fp
 8002a0a:	00cb      	lsls	r3, r1, #3
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a12:	4651      	mov	r1, sl
 8002a14:	00ca      	lsls	r2, r1, #3
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a22:	464b      	mov	r3, r9
 8002a24:	460a      	mov	r2, r1
 8002a26:	eb42 0303 	adc.w	r3, r2, r3
 8002a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a36:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a44:	4649      	mov	r1, r9
 8002a46:	008b      	lsls	r3, r1, #2
 8002a48:	4641      	mov	r1, r8
 8002a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a4e:	4641      	mov	r1, r8
 8002a50:	008a      	lsls	r2, r1, #2
 8002a52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a56:	f7fd fbc9 	bl	80001ec <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <UART_SetConfig+0x4e4>)
 8002a60:	fba3 1302 	umull	r1, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2164      	movs	r1, #100	@ 0x64
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	@ 0x32
 8002a72:	4a08      	ldr	r2, [pc, #32]	@ (8002a94 <UART_SetConfig+0x4e4>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4422      	add	r2, r4
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a94:	51eb851f 	.word	0x51eb851f

08002a98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a98:	b084      	sub	sp, #16
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	f107 001c 	add.w	r0, r7, #28
 8002aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d123      	bne.n	8002afa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ada:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 faa0 	bl	8003034 <USB_CoreReset>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e01b      	b.n	8002b32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa94 	bl	8003034 <USB_CoreReset>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b24:	e005      	b.n	8002b32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b32:	7fbb      	ldrb	r3, [r7, #30]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10b      	bne.n	8002b50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f043 0206 	orr.w	r2, r3, #6
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b5c:	b004      	add	sp, #16
 8002b5e:	4770      	bx	lr

08002b60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 0201 	bic.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d115      	bne.n	8002bd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f7fe f8f5 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	330a      	adds	r3, #10
 8002bba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa2b 	bl	8003018 <USB_GetMode>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d01e      	beq.n	8002c06 <USB_SetCurrentMode+0x84>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bcc:	d9f0      	bls.n	8002bb0 <USB_SetCurrentMode+0x2e>
 8002bce:	e01a      	b.n	8002c06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002be2:	200a      	movs	r0, #10
 8002be4:	f7fe f8dc 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	330a      	adds	r3, #10
 8002bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa12 	bl	8003018 <USB_GetMode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <USB_SetCurrentMode+0x84>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bfe:	d9f0      	bls.n	8002be2 <USB_SetCurrentMode+0x60>
 8002c00:	e001      	b.n	8002c06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e005      	b.n	8002c12 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2bc8      	cmp	r3, #200	@ 0xc8
 8002c0a:	d101      	bne.n	8002c10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e009      	b.n	8002c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3340      	adds	r3, #64	@ 0x40
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b0e      	cmp	r3, #14
 8002c54:	d9f2      	bls.n	8002c3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11c      	bne.n	8002c98 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c96:	e00b      	b.n	8002cb0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2300      	movs	r3, #0
 8002cba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f968 	bl	8002fa4 <USB_SetDevSpeed>
 8002cd4:	e008      	b.n	8002ce8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f963 	bl	8002fa4 <USB_SetDevSpeed>
 8002cde:	e003      	b.n	8002ce8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f95e 	bl	8002fa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ce8:	2110      	movs	r1, #16
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8fa 	bl	8002ee4 <USB_FlushTxFifo>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f924 	bl	8002f48 <USB_FlushRxFifo>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d10:	461a      	mov	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e043      	b.n	8002dbc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d4a:	d118      	bne.n	8002d7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e013      	b.n	8002d90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e008      	b.n	8002d90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3301      	adds	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d3b5      	bcc.n	8002d34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e043      	b.n	8002e56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de4:	d118      	bne.n	8002e18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e013      	b.n	8002e2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e008      	b.n	8002e2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	2300      	movs	r3, #0
 8002e28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	3301      	adds	r3, #1
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d3b5      	bcc.n	8002dce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002e82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <USB_DevInit+0x2c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002ea4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f043 0208 	orr.w	r2, r3, #8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002eb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
 8002ee0:	803c3800 	.word	0x803c3800

08002ee4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002efe:	d901      	bls.n	8002f04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e01b      	b.n	8002f3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	daf2      	bge.n	8002ef2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	019b      	lsls	r3, r3, #6
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f28:	d901      	bls.n	8002f2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e006      	b.n	8002f3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d0f0      	beq.n	8002f1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f60:	d901      	bls.n	8002f66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e018      	b.n	8002f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	daf2      	bge.n	8002f54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2210      	movs	r2, #16
 8002f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f84:	d901      	bls.n	8002f8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e006      	b.n	8002f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d0f0      	beq.n	8002f78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002ff0:	f023 0303 	bic.w	r3, r3, #3
 8002ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0301 	and.w	r3, r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800304c:	d901      	bls.n	8003052 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e01b      	b.n	800308a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	daf2      	bge.n	8003040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3301      	adds	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003076:	d901      	bls.n	800307c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d0f0      	beq.n	800306a <USB_CoreReset+0x36>

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <memset>:
 8003096:	4402      	add	r2, r0
 8003098:	4603      	mov	r3, r0
 800309a:	4293      	cmp	r3, r2
 800309c:	d100      	bne.n	80030a0 <memset+0xa>
 800309e:	4770      	bx	lr
 80030a0:	f803 1b01 	strb.w	r1, [r3], #1
 80030a4:	e7f9      	b.n	800309a <memset+0x4>
	...

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 f818 	bl	80030f0 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003134 	.word	0x08003134
 80030e4:	08003134 	.word	0x08003134
 80030e8:	08003134 	.word	0x08003134
 80030ec:	08003138 	.word	0x08003138

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
